#!/bin/bash

### Prerequisites ###
# Setup AWS Account
# create a user, give admin policy, and get user keys
# Install pip
# Download and install python3
# https://www.python.org/downloads/
# Install virutal env
# # Install AWS CLI
# sudo pip install awscli --ignore-installed six
# # Configure AWS CLI
# aws configure

# start this script from home directory: bash alexa-jukebox install

ACTION=$1
STACK_NAME=Jukebox
STACK_NAME_CHANGE_SET=${STACK_NAME}-change-set
LAMBDA_FUNCTION_NAME=jukebox_alexa_lambda_function
US_WEST_2_CF_TEMPLATE=jukebox_cloudformation/cloudformation_us-west-2.yaml
US_WEST_2_TEMPLATE_STRING=$(cat ${US_WEST_2_CF_TEMPLATE})
US_EAST_1_CF_TEMPLATE=jukebox_cloudformation/cloudformation_us-east-1.yaml

jukebox_songlist_update_songs() {
    echo 'Updating song database list...'
    cd jukebox_songlist
    python update_songs.py
    cd ..
}

pi_access_key() {
    # get the JukeboxRaspberryPiUserAccessKey from the output of cloudformation us-west-2
    US_WEST_2_PI_ACCESS_KEY=$(aws cloudformation describe-stacks --region us-west-2 --stack-name ${STACK_NAME} | grep -A1 'JukeboxRaspberryPiUserAccessKey')
    PI_ACCESS_KEY=$(echo ${US_WEST_2_PI_ACCESS_KEY} | sed -n 's/\"OutputKey\"\: \"JukeboxRaspberryPiUserAccessKey\"\, \"OutputValue\"\: \"\([A-Z0-9]*\)\"/\1/p')
    echo "${PI_ACCESS_KEY}"
}

pi_secret_key() {
    # get the JukeboxRaspberryPiUserSecretKey from the output of cloudformation us-west-2
#    echo 'Getting JukeboxRaspberryPi User SecretKey...'
    US_WEST_2_PI_SECRET_KEY=$(aws cloudformation describe-stacks --region us-west-2 --stack-name ${STACK_NAME} | grep -A1 'JukeboxRaspberryPiUserSecretKey')
    PI_SECRET_KEY=$(echo ${US_WEST_2_PI_SECRET_KEY} | sed -n 's/\"OutputKey\"\: \"JukeboxRaspberryPiUserSecretKey\"\, \"OutputValue\"\: \"\(.*\)\"/\1/p')
    echo "${PI_SECRET_KEY}"
}

alexa_lambda_arn() {
    # get the alexa lambda function name from the output of cloudformation us-east-2
    US_EAST_2_ALEXA_LAMBDA_ARN=$(aws cloudformation describe-stacks --region us-east-1 --stack-name ${STACK_NAME} | grep -A1 'JukeboxLambdaAlexaArn')
    ALEXA_LAMBDA_ARN=$(echo ${US_EAST_2_ALEXA_LAMBDA_ARN} | sed -n "s/.*\(arn\:aws\:lambda\:\us\-east\-1\:[0-9]*\:function\:${LAMBDA_FUNCTION_NAME}\).*/\1/p")
    echo "${ALEXA_LAMBDA_ARN}"
}

if [[ -z "${ACTION}" ]]; then

    echo "Type one of the following:"
    echo "  bash alexa-jukebox install-stacks"
    echo "  bash alexa-jukebox update-stacks"
    echo "  bash alexa-jukebox update-songs"
    echo "  bash alexa-jukebox info"
    echo "  bash alexa-jukebox delete-stacks"

elif [[ "${ACTION}" == 'install-stacks' ]]; then

    # create resources in us-west-2
    echo 'Creating resources in Oregon Region (us-west-2)...'
    aws cloudformation deploy --template-file ${US_WEST_2_CF_TEMPLATE} --region us-west-2 --stack-name ${STACK_NAME} --capabilities CAPABILITY_NAMED_IAM

    # get the queue arn from the output of cloudformation us-west-2
    echo 'Getting Queue Arn...'
    US_WEST_2_QUEUE_ARN=$(aws cloudformation describe-stacks --region us-west-2 --stack-name ${STACK_NAME} | grep -A1 'QueueARN')
    QUEUE_ARN=$(echo ${US_WEST_2_QUEUE_ARN} | sed -n 's/.*\(arn\:aws\:sqs\:\us\-west\-2\:[0-9]*\:jukebox_request_queue\.fifo\).*/\1/p')
    echo ${QUEUE_ARN}

    # get the queue url from the output of cloudformation us-west-2
    echo 'Getting Queue URL...'
    US_WEST_2_QUEUE_URL=$(aws cloudformation describe-stacks --region us-west-2 --stack-name ${STACK_NAME} | grep -A1 'QueueURL')
    QUEUE_URL=$(echo ${US_WEST_2_QUEUE_URL} | sed -n 's/.*\(https\:\/\/sqs\.us-west-2\.amazonaws\.com\/[0-9]*\/jukebox_request_queue\.fifo\).*/\1/p')
    echo ${QUEUE_URL}

    echo 'Getting JukeboxRaspberryPi User AccessKey...'
    PI_ACCESS_KEY=$(pi_access_key)
    PI_SECRET_KEY=$(pi_secret_key)

    # get the appid
    echo "Enter the Alexa Skill App ID, followed by [ENTER]:"
    read APP_ID

    # create resources in us-east-1
    echo 'Creating resources in N. Virginia Region (us-east-1)...'
    aws cloudformation deploy --template-file ${US_EAST_1_CF_TEMPLATE} --region us-east-1 --stack-name ${STACK_NAME} --parameter-overrides RequestQueueArn=${QUEUE_ARN} --capabilities CAPABILITY_NAMED_IAM

    echo 'Getting Alexa Lambda function ARN...'
    ALEXA_LAMBDA_ARN=$(alexa_lambda_arn)

    # Updating lambda function
    echo 'Updating Lambda function configs in N. Virginia Region (us-east-1)...'
    aws lambda update-function-configuration --region us-east-1 --function-name ${LAMBDA_FUNCTION_NAME} --environment Variables="{SQS_QUEUE_URL=${QUEUE_URL},APP_ID=${APP_ID}}"
    echo 'Zipping Lambda function...'
    cd jukebox_alexa_lambda
    zip -r jukebox_alexa_lambda.zip index.js node_modules
    echo 'Deploying Lambda function in N. Virginia Region (us-east-1)...'
    aws lambda update-function-code --region us-east-1 --function-name ${LAMBDA_FUNCTION_NAME} --zip-file fileb://jukebox_alexa_lambda.zip
    echo 'Clean up...'
    rm jukebox_alexa_lambda.zip
    cd ..

    # Update the song list in dynamodb
    jukebox_songlist_update_songs

    # Important values needed
    echo 'Setup complete. Some values you will need...'
    echo 'Add these keys to the raspberry pi'
    echo ${PI_ACCESS_KEY}
    echo ${PI_SECRET_KEY}
    echo 'Add this ARN to your alexa skill'
    echo ${ALEXA_LAMBDA_ARN}

elif [[ "${ACTION}" == 'update-songs' ]]; then

    jukebox_songlist_update_songs

elif [[ "${ACTION}" == 'update-stacks' ]]; then

    echo "Deleting old change sets..."
    aws cloudformation delete-change-set --stack-name ${STACK_NAME} --change-set-name ${STACK_NAME_CHANGE_SET}  --region us-west-2
    echo "Creating new change sets..."
    aws cloudformation create-change-set --stack-name ${STACK_NAME} --change-set-name ${STACK_NAME_CHANGE_SET} --template-body "${US_WEST_2_TEMPLATE_STRING}" --change-set-type UPDATE --capabilities CAPABILITY_NAMED_IAM
    echo "Confirming new change set..."
    CHANGE_SET_OUTPUT=$(aws cloudformation describe-change-set --stack-name ${STACK_NAME} --change-set-name ${STACK_NAME_CHANGE_SET} | grep 'Status')
    CHANGE_SET_STATUS=$(echo ${CHANGE_SET_OUTPUT} | sed -n 's/.*\"Status\"\: \"\([A-Z]*\)\".*/\1/p')
    if [[ "${CHANGE_SET_STATUS}" == 'SUCCESS' ]]; then
        echo "Executing new change set..."
        aws cloudformation update-stack --stack-name ${STACK_NAME} --change-set-name ${STACK_NAME_CHANGE_SET}  --capabilities CAPABILITY_NAMED_IAM  --region us-west-2
        echo "Changes complete..."
    else
        echo "Problem with update"
        echo ${CHANGE_SET_OUTPUT}
    fi
elif [[ "${ACTION}" == 'info' ]]; then

    PI_ACCESS_KEY=$(pi_access_key)
    PI_SECRET_KEY=$(pi_secret_key)
    ALEXA_LAMBDA_ARN=$(alexa_lambda_arn)

    echo "Information:"
    echo "Pi Access Key: ${PI_ACCESS_KEY}"
    echo "Pi Secret Key: ${PI_SECRET_KEY}"
    echo "Alexa Lambda Arn: ${ALEXA_LAMBDA_ARN}"

elif [[ "${ACTION}" == 'delete-stacks' ]]; then

    echo "Are you sure you want to delete all the stacks[Yy]? "
    read delete_response

    if [[ "${delete_response}" == 'Y' || "${delete_response}" == 'y' ]]; then

        echo "Deleing ${STACK_NAME} in region us-east-1"
        aws cloudformation delete-stack --stack-name ${STACK_NAME} --region us-east-1
        echo "Deleing ${STACK_NAME} in region us-west-2"
        aws cloudformation delete-stack --stack-name ${STACK_NAME} --region us-west-2

    fi


fi


# terminal download and install aws cli
# aws configure - add user keys
# download and unzip from github
# terminal go into that directory
# run cloudformation command